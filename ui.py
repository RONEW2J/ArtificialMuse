import sys
import os
import requests

from PySide6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QLabel, QLineEdit, QPushButton,
    QProgressBar, QFileDialog, QMessageBox, QSpinBox, QHBoxLayout, QTabWidget,
    QComboBox, QListWidget, QListWidgetItem, QMenu, QSplitter, QFrame,
    QGraphicsDropShadowEffect, QScrollArea, QGridLayout, QCheckBox, QGroupBox,
    QTextEdit, QButtonGroup
)
from PySide6.QtCore import Qt, QPropertyAnimation, QEasingCurve, QRect, QTimer, Signal, QSize
from PySide6.QtGui import QIcon, QFont, QPalette, QColor, QPainter, QPainterPath, QPixmap

from downloader import DownloadImageWorker
from styles import Styles
from viewer import ImagePreviewWidget


def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except AttributeError:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)


class Card(QFrame):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å —Ç–µ–Ω—å—é –∏ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setFrameStyle(QFrame.NoFrame)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(15)
        shadow.setColor(QColor(0, 0, 0, 40))
        shadow.setOffset(0, 2)
        self.setGraphicsEffect(shadow)

    def focusInEvent(self, event):
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setColor(QColor(102, 126, 234, 100))
        shadow.setOffset(0, 0)
        self.setGraphicsEffect(shadow)
        super().focusInEvent(event)

    def focusOutEvent(self, event):
        self.setGraphicsEffect(None)
        super().focusOutEvent(event)


class AnimatedButton(QPushButton):
    """–ö–Ω–æ–ø–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –Ω–∞–∂–∞—Ç–∏—è"""
    def __init__(self, text="", parent=None):
        super().__init__(text, parent)
        self.setMinimumHeight(45)
        self.setCursor(Qt.PointingHandCursor)

    def enterEvent(self, event):
        self.setProperty("hovered", True)
        self.style().unpolish(self)
        self.style().polish(self)
        super().enterEvent(event)

    def leaveEvent(self, event):
        self.setProperty("hovered", False)
        self.style().unpolish(self)
        self.style().polish(self)
        super().leaveEvent(event)


class CheckBox(QCheckBox):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–µ–∫–±–æ–∫—Å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
    def __init__(self, text="", parent=None):
        super().__init__(text, parent)
        self.setCursor(Qt.PointingHandCursor)


class StyledSpinBox(QSpinBox):
    """–°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π SpinBox"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setMinimumHeight(40)


class StyledComboBox(QComboBox):
    """–°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ComboBox"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setMinimumHeight(40)


class ListWidget(QListWidget):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setSpacing(4)
        self.setUniformItemSizes(True)


class ImageDownloaderApp(QWidget):
    def __init__(self):
        super().__init__()
        self.current_style = "dark"
        self.remote_models_loaded = False
        self.remote_models_list = []
        self.local_models_list = [
            "flux-pro", "stable-diffusion", "vqgan-clip", "midjourney",
            "animegan", "pixel-art", "watercolor", "oil-painting"
        ]
        self.save_dir = ""
        self.styles = Styles()
        self.init_ui()

    def init_ui(self):
        self.setWindowIcon(QIcon(resource_path("resources/icon.png")))
        self.setWindowTitle("üé® ArtificialMuse")
        self.setGeometry(200, 100, 1200, 800)
        self.setMinimumSize(1000, 700)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QHBoxLayout()
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)

        # –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter = QSplitter(Qt.Horizontal)
        splitter.setHandleWidth(3)
        splitter.setChildrenCollapsible(False)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (–æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        left_panel = self.create_left_panel()
        left_panel.setMinimumWidth(450)
        left_panel.setMaximumWidth(600)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–ø—Ä–µ–≤—å—é)
        right_panel = self.create_right_panel()
        right_panel.setMinimumWidth(400)

        splitter.addWidget(left_panel)
        splitter.addWidget(right_panel)
        splitter.setStretchFactor(0, 1)
        splitter.setStretchFactor(1, 1)

        main_layout.addWidget(splitter)
        self.setLayout(main_layout)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self.apply__style()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–≤
        self.setup_size_presets()

    def create_left_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        panel = QWidget()
        layout = QVBoxLayout(panel)
        layout.setSpacing(20)
        layout.setContentsMargins(0, 0, 0, 0)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        header = self.create_header()
        layout.addWidget(header)

        # –¢–∞–±—ã
        tabs = QTabWidget()
        tabs.setTabPosition(QTabWidget.North)
        
        # –í–∫–ª–∞–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generate_tab = self.create_generate_tab()
        settings_tab = self.create_settings_tab()
        about_tab = self.create_about_tab()
        
        tabs.addTab(generate_tab, "üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è")
        tabs.addTab(settings_tab, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        tabs.addTab(about_tab, "‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        
        layout.addWidget(tabs)

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bottom_panel = self.create_bottom_panel()
        layout.addWidget(bottom_panel)

        return panel

    def create_header(self):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        header_card = Card()
        header_layout = QVBoxLayout(header_card)
        header_layout.setContentsMargins(25, 20, 25, 20)

        title = QLabel("AI Image Generator")
        title.setAlignment(Qt.AlignCenter)
        title.setObjectName("titleLabel")

        subtitle = QLabel("–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò")
        subtitle.setAlignment(Qt.AlignCenter)
        subtitle.setObjectName("subtitleLabel")

        header_layout.addWidget(title)
        header_layout.addWidget(subtitle)

        return header_card

    def create_generate_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        tab = QWidget()
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setFrameStyle(QFrame.NoFrame)
        
        content = QWidget()
        layout = QVBoxLayout(content)
        layout.setSpacing(20)
        layout.setContentsMargins(10, 10, 10, 10)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
        prompt_card = self.create_prompt_card()
        layout.addWidget(prompt_card)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –º–æ–¥–µ–ª–µ–π
        models_card = self.create_models_card()
        layout.addWidget(models_card)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params_card = self.create_parameters_card()
        layout.addWidget(params_card)

        layout.addStretch()
        scroll.setWidget(content)
        
        tab_layout = QVBoxLayout(tab)
        tab_layout.setContentsMargins(0, 0, 0, 0)
        tab_layout.addWidget(scroll)
        
        return tab

    def create_prompt_card(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞"""
        card = Card()
        layout = QVBoxLayout(card)
        layout.setContentsMargins(25, 20, 25, 20)
        layout.setSpacing(15)

        title = QLabel("üìù –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        title.setObjectName("cardTitle")
        layout.addWidget(title)

        self.input_prompt = QTextEdit()
        self.input_prompt.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ –≤ —Å—Ç–∏–ª–µ –í–∞–Ω –ì–æ–≥–∞, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ, 4K –∫–∞—á–µ—Å—Ç–≤–æ...")
        self.input_prompt.setMaximumHeight(100)
        self.input_prompt.setObjectName("promptInput")
        layout.addWidget(self.input_prompt)

        return card

    def create_models_card(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π"""
        card = Card()
        layout = QVBoxLayout(card)
        layout.setContentsMargins(25, 20, 25, 20)
        layout.setSpacing(15)

        title = QLabel("ü§ñ –ú–æ–¥–µ–ª–∏ –ò–ò")
        title.setObjectName("cardTitle")
        layout.addWidget(title)

        # –¢–∞–±—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        models_tabs = QTabWidget()
        models_tabs.setMaximumHeight(300)

        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
        local_tab = QWidget()
        local_layout = QVBoxLayout(local_tab)
        local_layout.setContentsMargins(10, 10, 10, 10)

        self.local_model_list = ListWidget()
        self.local_model_list.setMaximumHeight(200)
        
        for model in self.local_models_list:
            item = QListWidgetItem(f"üé® {model}")
            item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
            item.setCheckState(Qt.Unchecked)
            self.local_model_list.addItem(item)

        local_layout.addWidget(self.local_model_list)
        models_tabs.addTab(local_tab, "–ë–∞–∑–æ–≤—ã–µ")

        # –£–¥–∞–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        remote_tab = QWidget()
        remote_layout = QVBoxLayout(remote_tab)
        remote_layout.setContentsMargins(10, 10, 10, 10)

        self.remote_model_list = ListWidget()
        self.remote_model_list.setMaximumHeight(150)
        remote_layout.addWidget(self.remote_model_list)

        self.refresh_models_button = AnimatedButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ API")
        self.refresh_models_button.clicked.connect(self.load_remote_models)
        remote_layout.addWidget(self.refresh_models_button)

        models_tabs.addTab(remote_tab, "API –º–æ–¥–µ–ª–∏")
        layout.addWidget(models_tabs)

        return card

    def create_parameters_card(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        card = Card()
        layout = QVBoxLayout(card)
        layout.setContentsMargins(25, 20, 25, 20)
        layout.setSpacing(15)

        title = QLabel("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        title.setObjectName("cardTitle")
        layout.addWidget(title)

        # Grid layout –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params_grid = QGridLayout()
        params_grid.setSpacing(15)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        count_label = QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
        count_label.setObjectName("paramLabel")
        self.input_count = StyledSpinBox()
        self.input_count.setRange(1, 50)
        self.input_count.setValue(1)
        self.input_count.setSuffix(" —à—Ç.")

        params_grid.addWidget(count_label, 0, 0)
        params_grid.addWidget(self.input_count, 0, 1)

        # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        size_label = QLabel("–†–∞–∑–º–µ—Ä:")
        size_label.setObjectName("paramLabel")
        self.combo_preset = StyledComboBox()
        
        params_grid.addWidget(size_label, 1, 0)
        params_grid.addWidget(self.combo_preset, 1, 1)

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã
        self.input_width = StyledSpinBox()
        self.input_width.setRange(256, 4096)
        self.input_width.setValue(1024)
        self.input_width.setSuffix(" px")
        
        self.input_height = StyledSpinBox()
        self.input_height.setRange(256, 4096)
        self.input_height.setValue(1024)
        self.input_height.setSuffix(" px")

        params_grid.addWidget(QLabel("–®–∏—Ä–∏–Ω–∞:"), 2, 0)
        params_grid.addWidget(self.input_width, 2, 1)
        params_grid.addWidget(QLabel("–í—ã—Å–æ—Ç–∞:"), 3, 0)
        params_grid.addWidget(self.input_height, 3, 1)

        layout.addLayout(params_grid)
        return card

    def create_settings_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(20)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        folder_card = Card()
        folder_layout = QVBoxLayout(folder_card)
        folder_layout.setContentsMargins(25, 20, 25, 20)
        folder_layout.setSpacing(15)

        folder_title = QLabel("üìÅ –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        folder_title.setObjectName("cardTitle")
        folder_layout.addWidget(folder_title)

        self.folder_button = AnimatedButton("–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É")
        self.folder_button.clicked.connect(self.select_folder)
        folder_layout.addWidget(self.folder_button)

        self.folder_path_label = QLabel("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        self.folder_path_label.setObjectName("pathLabel")
        self.folder_path_label.setWordWrap(True)
        folder_layout.addWidget(self.folder_path_label)

        layout.addWidget(folder_card)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–µ–º—ã
        theme_card = Card()
        theme_layout = QVBoxLayout(theme_card)
        theme_layout.setContentsMargins(25, 20, 25, 20)
        theme_layout.setSpacing(15)

        theme_title = QLabel("üé® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥")
        theme_title.setObjectName("cardTitle")
        theme_layout.addWidget(theme_title)

        theme_buttons_layout = QHBoxLayout()
        self.dark_theme_btn = AnimatedButton("üåô –¢–µ–º–Ω–∞—è")
        self.light_theme_btn = AnimatedButton("‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è")
        
        self.dark_theme_btn.clicked.connect(lambda: self.set_theme("dark"))
        self.light_theme_btn.clicked.connect(lambda: self.set_theme("light"))
        
        theme_buttons_layout.addWidget(self.dark_theme_btn)
        theme_buttons_layout.addWidget(self.light_theme_btn)
        theme_layout.addLayout(theme_buttons_layout)

        layout.addWidget(theme_card)
        layout.addStretch()

        return tab

    def create_about_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(10, 10, 10, 10)

        card = Card()
        card_layout = QVBoxLayout(card)
        card_layout.setContentsMargins(30, 25, 30, 25)
        card_layout.setSpacing(20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üé® AI Image Generator")
        title.setAlignment(Qt.AlignCenter)
        title.setObjectName("aboutTitle")
        card_layout.addWidget(title)

        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = QLabel(
            "–ú–æ—â–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é "
            "—Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ API Pollinations.AI"
        )
        description.setAlignment(Qt.AlignCenter)
        description.setWordWrap(True)
        description.setObjectName("aboutDescription")
        card_layout.addWidget(description)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ
        author_info = QLabel(
            "<b>–ê–≤—Ç–æ—Ä:</b> Ronew2J<br>"
            "<b>Telegram:</b> <a href='https://t.me/RonewJJ' style='color: #667eea;'>@RonewJJ</a><br>"
            "<b>Email:</b> <a href='mailto:ronew2j@gmail.com' style='color: #667eea;'>ronew2j@gmail.com</a>"
        )
        author_info.setAlignment(Qt.AlignCenter)
        author_info.setTextInteractionFlags(Qt.TextBrowserInteraction)
        author_info.setOpenExternalLinks(True)
        author_info.setObjectName("authorInfo")
        card_layout.addWidget(author_info)

        layout.addWidget(card)
        layout.addStretch()

        return tab

    def create_bottom_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        panel = QWidget()
        layout = QVBoxLayout(panel)
        layout.setSpacing(15)

        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generate_button = AnimatedButton("üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
        self.generate_button.setObjectName("generateButton")
        self.generate_button.setMinimumHeight(50)
        self.generate_button.clicked.connect(self.start_download)
        layout.addWidget(self.generate_button)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setTextVisible(True)
        self.progress_bar.setAlignment(Qt.AlignCenter)
        self.progress_bar.setValue(0)
        self.progress_bar.setObjectName("ProgressBar")
        layout.addWidget(self.progress_bar)

        return panel

    def create_right_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å —Å –ø—Ä–µ–≤—å—é"""
        panel = Card()
        layout = QVBoxLayout(panel)
        layout.setContentsMargins(20, 20, 20, 20)

        title = QLabel("üñºÔ∏è –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        title.setObjectName("cardTitle")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        self.preview = ImagePreviewWidget()
        layout.addWidget(self.preview)

        return panel

    def setup_size_presets(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–µ—Å–µ—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤"""
        self.preset_sizes = {
            0: (None, None),
            1: (1920, 1080),
            2: (2560, 1440),
            3: (3840, 2160),
            4: (1024, 1024),
            5: (2048, 2048),
            6: (1080, 1920),
            7: (1440, 2560),
            8: (2160, 3840),
        }

        presets = [
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π",
            "Full HD (1920√ó1080)",
            "2K (2560√ó1440)",
            "4K (3840√ó2160)",
            "–ö–≤–∞–¥—Ä–∞—Ç 1K (1024√ó1024)",
            "–ö–≤–∞–¥—Ä–∞—Ç 2K (2048√ó2048)",
            "–¢–µ–ª–µ—Ñ–æ–Ω Full HD (1080√ó1920)",
            "–¢–µ–ª–µ—Ñ–æ–Ω 2K (1440√ó2560)",
            "–¢–µ–ª–µ—Ñ–æ–Ω 4K (2160√ó3840)"
        ]

        for preset in presets:
            self.combo_preset.addItem(preset)

        self.combo_preset.currentIndexChanged.connect(self.preset_changed)
        self.preset_changed(0)

    def apply__style(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏"""
        stylesheet = self.styles.get_style(self.current_style)
        self.setStyleSheet(stylesheet)

    def set_theme(self, theme):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–º—É"""
        self.current_style = theme
        self.apply__style()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Ç–µ–º—ã
        if theme == "dark":
            self.dark_theme_btn.setProperty("active", True)
            self.light_theme_btn.setProperty("active", False)
        else:
            self.dark_theme_btn.setProperty("active", False)
            self.light_theme_btn.setProperty("active", True)
        
        self.dark_theme_btn.style().unpolish(self.dark_theme_btn)
        self.dark_theme_btn.style().polish(self.dark_theme_btn)
        self.light_theme_btn.style().unpolish(self.light_theme_btn)
        self.light_theme_btn.style().polish(self.light_theme_btn)

    def preset_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞"""
        size = self.preset_sizes.get(index, (None, None))
        if size[0] is None:
            self.input_width.setEnabled(True)
            self.input_height.setEnabled(True)
        else:
            w, h = size
            self.input_width.setValue(w)
            self.input_height.setValue(h)
            self.input_width.setEnabled(False)
            self.input_height.setEnabled(False)

    def select_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        start_dir = self.save_dir if self.save_dir else os.path.expanduser("~")
        folder = QFileDialog.getExistingDirectory(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", start_dir
        )
        if folder:
            self.save_dir = folder
            self.folder_path_label.setText(f"üìÅ {self.save_dir}")
            self.folder_button.setText("‚úÖ –ü–∞–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞")

    def load_remote_models(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        self.remote_model_list.clear()
        self.refresh_models_button.setEnabled(False)
        self.refresh_models_button.setText("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...")
        QApplication.processEvents()

        try:
            response = requests.get("https://image.pollinations.ai/models", timeout=20)
            if response.status_code == 200:
                models = response.json()
                if isinstance(models, list) and all(isinstance(m, str) for m in models):
                    models.sort()
                    for model in models:
                        item = QListWidgetItem(f"üîó {model}")
                        item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
                        item.setCheckState(Qt.Unchecked)
                        self.remote_model_list.addItem(item)
                    self.remote_models_loaded = True
                    self.refresh_models_button.setText("‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                else:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö API")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
        except requests.RequestException as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.refresh_models_button.setEnabled(True)
            if not self.remote_models_loaded:
                self.refresh_models_button.setText("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ API")

    def start_download(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        prompt = self.input_prompt.toPlainText().strip()
        count = self.input_count.value()
        width = self.input_width.value()
        height = self.input_height.value()

        # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        local_selected = []
        for i in range(self.local_model_list.count()):
            item = self.local_model_list.item(i)
            if item.checkState() == Qt.Checked:
                local_selected.append(item.text().replace("üé® ", ""))

        remote_selected = []
        for i in range(self.remote_model_list.count()):
            item = self.remote_model_list.item(i)
            if item.checkState() == Qt.Checked:
                remote_selected.append(item.text().replace("üîó ", ""))

        all_models = local_selected + remote_selected

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not prompt:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            return
        if not all_models:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–¥–µ–ª—å!")
            return
        if not self.save_dir:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return

        # –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.set_ui_enabled(False)
        self.progress_bar.setValue(0)
        self.progress_bar.setFormat("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
        self.worker = DownloadImageWorker(
            prompt=prompt,
            final_width=width,
            final_height=height,
            models=all_models,
            save_dir=self.save_dir,
            count=count
        )
        
        self.worker.progress.connect(self.update_progress)
        self.worker.finished.connect(self.download_finished)
        self.worker.image_generated.connect(self.preview.add_image)
        self.worker.error_occurred.connect(self.show_generation_error)
        self.worker.start()

    def set_ui_enabled(self, enabled):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.generate_button.setEnabled(enabled)
        self.folder_button.setEnabled(enabled)
        self.refresh_models_button.setEnabled(enabled)
        self.input_prompt.setEnabled(enabled)
        self.input_count.setEnabled(enabled)
        self.combo_preset.setEnabled(enabled)
        self.local_model_list.setEnabled(enabled)
        self.remote_model_list.setEnabled(enabled)
        
        if not enabled:
            self.generate_button.setText("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        else:
            self.generate_button.setText("üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")

    def update_progress(self, value):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        self.progress_bar.setValue(value)
        if value < 100:
            self.progress_bar.setFormat(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è... {value}%")
        else:
            self.progress_bar.setFormat("‚úÖ –ì–æ—Ç–æ–≤–æ!")

    def show_generation_error(self, error_msg):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}")

    def download_finished(self, success, failed_images):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        self.set_ui_enabled(True)
        
        if success and not failed_images:
            self.progress_bar.setFormat("‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã!")
            QMessageBox.information(
                self, "üéâ –£—Å–ø–µ—Ö!", 
                "–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
            )
        elif failed_images:
            failed_count = len(failed_images)
            self.progress_bar.setFormat(f"‚ö†Ô∏è –ì–æ—Ç–æ–≤–æ —Å –æ—à–∏–±–∫–∞–º–∏ ({failed_count})")
            
            msg = f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ {failed_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å:\n\n"
            for i, fail in enumerate(failed_images[:5]):
                msg += f"‚Ä¢ {fail['model']}: {fail['error']}\n"
            if failed_count > 5:
                msg += f"\n... –∏ –µ—â–µ {failed_count - 5} –æ—à–∏–±–æ–∫."
                
            QMessageBox.warning(self, "‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏", msg)
        else:
            self.progress_bar.setFormat("‚ùå –û—à–∏–±–∫–∞!")
            QMessageBox.critical(
                self, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
            )
